{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/codertinie/flatiron/Bank-of-Flatiron-Coding-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  //store fetched data in a state\n  const [transactions, setTransactions] = useState([]); //starting with an empty array\n  // use useEffect hook\n\n  useEffect(() => {\n    //fetch data\n    fetch(\"http://localhost:8001/transactions\").then(resp => resp.json()).then(transc => {\n      setTransactions(transc);\n    }); // console.log(transac)) // to confirm the fetch works\n  }, []); // pass dependency array\n\n  function handleUpdate(newTransaction) {\n    console.log(newTransaction); // check for errors\n    //add it to transactions\n    // add a new post to add data to server\n    //Post requires server options\n\n    const serverOptions = {\n      method: \"POST\",\n      headers: {\n        \"content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTransaction)\n    }; //ensures the data persists\n\n    fetch(\"http://localhost:8001/transactions\", serverOptions) // pass it as second argument\n    .then(resp => resp.json()).then(newItem => setTransactions(transactions => [...transactions, newItem])); // t add the data to server\n  }\n\n  function handleSearching(search) {\n    //filter\n    setTransactions(transactions => transactions.filter(transaction => transaction.description.includes(search)));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearching: handleSearching\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onSubmission: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: transactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/codertinie/flatiron/Bank-of-Flatiron-Coding-challenge/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transactions","setTransactions","fetch","then","resp","json","transc","handleUpdate","newTransaction","console","log","serverOptions","method","headers","body","JSON","stringify","newItem","handleSearching","search","filter","transaction","description","includes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC5B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD,CAF4B,CAEyB;AACrD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAQ,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACCC,IADD,CACOC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADhB,EAECF,IAFD,CAEMG,MAAM,IAAI;AACdL,MAAAA,eAAe,CAACK,MAAD,CAAf;AACD,KAJD,EAFc,CAOZ;AACH,GARQ,EAQP,EARO,CAAT,CAJ4B,CAYtB;;AAEN,WAASC,YAAT,CAAsBC,cAAtB,EAAqC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ,EADmC,CACP;AAC5B;AACF;AACA;;AACE,UAAMG,aAAa,GAAG;AACpBC,MAAAA,MAAM,EAAG,MADW;AAEpBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFW;AAKpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,cAAf;AALc,KAAtB,CALmC,CAYnC;;AACAN,IAAAA,KAAK,CAAC,oCAAD,EAAuCS,aAAvC,CAAL,CAA0D;AAA1D,KACCR,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMc,OAAO,IAAIhB,eAAe,CAACD,YAAY,IAAI,CAAC,GAAGA,YAAJ,EAAkBiB,OAAlB,CAAjB,CAFhC,EAbmC,CAe2C;AAC/E;;AAEC,WAASC,eAAT,CAAyBC,MAAzB,EAAgC;AAC9B;AACAlB,IAAAA,eAAe,CAACD,YAAY,IAAIA,YAAY,CAACoB,MAAb,CAAoBC,WAAW,IAAIA,WAAW,CAACC,WAAZ,CAAwBC,QAAxB,CAAiCJ,MAAjC,CAAnC,CAAjB,CAAf;AACD;;AAGD,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAED;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAoB,MAAA,YAAY,EAAEX;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEP;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA7CQD,gB;;KAAAA,gB;AA+CT,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n//store fetched data in a state\nconst [transactions, setTransactions] = useState([]) //starting with an empty array\n// use useEffect hook\nuseEffect(() => {\n  //fetch data\n  fetch(\"http://localhost:8001/transactions\")\n  .then((resp) => resp.json())\n  .then(transc => {\n    setTransactions(transc)\n  })\n    // console.log(transac)) // to confirm the fetch works\n},[]) // pass dependency array\n\nfunction handleUpdate(newTransaction){\n  console.log(newTransaction) // check for errors\n  //add it to transactions\n// add a new post to add data to server\n//Post requires server options\n  const serverOptions = {\n    method : \"POST\",\n    headers: {\n      \"content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newTransaction)\n  }\n  //ensures the data persists\n  fetch(\"http://localhost:8001/transactions\", serverOptions)// pass it as second argument\n  .then(resp => resp.json())\n  .then(newItem => setTransactions(transactions => [...transactions, newItem])) // t add the data to server\n}\n\n  function handleSearching(search){\n    //filter\n    setTransactions(transactions => transactions.filter(transaction => transaction.description.includes(search)))\n  }\n\n\n  return (\n    <div>\n      <Search onSearching={handleSearching}/>\n      <AddTransactionForm onSubmission={handleUpdate}/>\n      <TransactionsList transactions={transactions}/>\n    </div>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}